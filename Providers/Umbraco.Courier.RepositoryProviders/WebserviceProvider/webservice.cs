
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using Umbraco.Courier.Core;
using Umbraco.Courier.RepositoryProviders.Webservices;
using Umbraco.Courier.Core.Enums;


namespace Umbraco.Courier.RepositoryProviders.WebServiceProvider
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Runtime Version:4.0.30319.235
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------

    using System;
    using System.ComponentModel;
    using System.Data;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;

    // 
    // This source code was auto-generated by wsdl, Version=4.0.30319.1.
    // 


    // 
    // This source code was auto-generated by wsdl, Version=4.0.30319.1.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "RepositorySoap", Namespace = "http://courier.umbraco.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ItemConflict[]))]
    public partial class RepositoryWebservice : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback CommitRevisionOperationCompleted;

        private System.Threading.SendOrPostCallback CommitRevisionitemOperationCompleted;

        private System.Threading.SendOrPostCallback CommitResourceitemOperationCompleted;

        private System.Threading.SendOrPostCallback CompareRevisionOperationCompleted;

        private System.Threading.SendOrPostCallback ExtractRevisionOperationCompleted;

        private System.Threading.SendOrPostCallback OpenSessionOperationCompleted;

        private System.Threading.SendOrPostCallback CloseSessionOperationCompleted;

        private System.Threading.SendOrPostCallback CommitOperationCompleted;

        private System.Threading.SendOrPostCallback RollbackOperationCompleted;

        private System.Threading.SendOrPostCallback GetAvailableRevisionsOperationCompleted;

        private System.Threading.SendOrPostCallback GetRevisionOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateRevisionOperationCompleted;

        private System.Threading.SendOrPostCallback ExistsOperationCompleted;

        private System.Threading.SendOrPostCallback CompareOperationCompleted;

        private System.Threading.SendOrPostCallback ExtractOperationCompleted;

        private System.Threading.SendOrPostCallback PostProcessOperationCompleted;

        private System.Threading.SendOrPostCallback TransferResourceOperationCompleted;

        private System.Threading.SendOrPostCallback TransferResourcesOperationCompleted;

        private System.Threading.SendOrPostCallback ExecuteOperationCompleted;

        private System.Threading.SendOrPostCallback ExecuteQueueOperationCompleted;

        private System.Threading.SendOrPostCallback PackageOperationCompleted;

        private System.Threading.SendOrPostCallback GetChildrenOperationCompleted;

        private System.Threading.SendOrPostCallback GetResourceContentsOperationCompleted;

        private System.Threading.SendOrPostCallback GetResourceHashOperationCompleted;

        private System.Threading.SendOrPostCallback GetItemHashOperationCompleted;

        private System.Threading.SendOrPostCallback SaveItemOperationCompleted;

        private System.Threading.SendOrPostCallback ClearOperationCompleted;

        private System.Threading.SendOrPostCallback SaveResourceContentsOperationCompleted;

        /// <remarks/>
        /// <remarks/>
        public RepositoryWebservice(string url)
        {
            if (!Context.Current.HasHttpContext)
                url += "?fromExternalClient=true";

            this.Timeout = Core.Settings.TimeOut;
            
            this.Url = url;
        }

        /// <remarks/>
        public event CommitRevisionCompletedEventHandler CommitRevisionCompleted;

        /// <remarks/>
        public event CommitRevisionitemCompletedEventHandler CommitRevisionitemCompleted;

        /// <remarks/>
        public event CommitResourceitemCompletedEventHandler CommitResourceitemCompleted;

        /// <remarks/>
        public event CompareRevisionCompletedEventHandler CompareRevisionCompleted;

        /// <remarks/>
        public event ExtractRevisionCompletedEventHandler ExtractRevisionCompleted;

        /// <remarks/>
        public event OpenSessionCompletedEventHandler OpenSessionCompleted;

        /// <remarks/>
        public event CloseSessionCompletedEventHandler CloseSessionCompleted;

        /// <remarks/>
        public event CommitCompletedEventHandler CommitCompleted;

        /// <remarks/>
        public event RollbackCompletedEventHandler RollbackCompleted;

        /// <remarks/>
        public event GetAvailableRevisionsCompletedEventHandler GetAvailableRevisionsCompleted;

        /// <remarks/>
        public event GetRevisionCompletedEventHandler GetRevisionCompleted;

        /// <remarks/>
        public event ValidateRevisionCompletedEventHandler ValidateRevisionCompleted;

        /// <remarks/>
        public event ExistsCompletedEventHandler ExistsCompleted;

        /// <remarks/>
        public event CompareCompletedEventHandler CompareCompleted;

        /// <remarks/>
        public event ExtractCompletedEventHandler ExtractCompleted;

        /// <remarks/>
        public event PostProcessCompletedEventHandler PostProcessCompleted;

        /// <remarks/>
        public event TransferResourceCompletedEventHandler TransferResourceCompleted;

        /// <remarks/>
        public event TransferResourcesCompletedEventHandler TransferResourcesCompleted;

        /// <remarks/>
        public event ExecuteCompletedEventHandler ExecuteCompleted;

        /// <remarks/>
        public event ExecuteQueueCompletedEventHandler ExecuteQueueCompleted;

        /// <remarks/>
        public event PackageCompletedEventHandler PackageCompleted;

        /// <remarks/>
        public event GetChildrenCompletedEventHandler GetChildrenCompleted;

        /// <remarks/>
        public event GetResourceContentsCompletedEventHandler GetResourceContentsCompleted;

        /// <remarks/>
        public event GetResourceHashCompletedEventHandler GetResourceHashCompleted;

        /// <remarks/>
        public event GetItemHashCompletedEventHandler GetItemHashCompleted;

        /// <remarks/>
        public event SaveItemCompletedEventHandler SaveItemCompleted;

        /// <remarks/>
        public event ClearCompletedEventHandler ClearCompleted;

        /// <remarks/>
        public event SaveResourceContentsCompletedEventHandler SaveResourceContentsCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/CommitRevision", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CommitRevision(Revision revision, string username, string password)
        {
            object[] results = this.Invoke("CommitRevision", new object[] {
                    revision,
                    username,
                    password});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCommitRevision(Revision revision, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CommitRevision", new object[] {
                    revision,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCommitRevision(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CommitRevisionAsync(Revision revision, string username, string password)
        {
            this.CommitRevisionAsync(revision, username, password, null);
        }

        /// <remarks/>
        public void CommitRevisionAsync(Revision revision, string username, string password, object userState)
        {
            if ((this.CommitRevisionOperationCompleted == null))
            {
                this.CommitRevisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitRevisionOperationCompleted);
            }
            this.InvokeAsync("CommitRevision", new object[] {
                    revision,
                    username,
                    password}, this.CommitRevisionOperationCompleted, userState);
        }

        private void OnCommitRevisionOperationCompleted(object arg)
        {
            if ((this.CommitRevisionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitRevisionCompleted(this, new CommitRevisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/CommitRevisionitem", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CommitRevisionitem(string revision, RevisionItem revisionItem, string username, string password)
        {
            object[] results = this.Invoke("CommitRevisionitem", new object[] {
                    revision,
                    revisionItem,
                    username,
                    password});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCommitRevisionitem(string revision, RevisionItem revisionItem, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CommitRevisionitem", new object[] {
                    revision,
                    revisionItem,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCommitRevisionitem(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CommitRevisionitemAsync(string revision, RevisionItem revisionItem, string username, string password)
        {
            this.CommitRevisionitemAsync(revision, revisionItem, username, password, null);
        }

        /// <remarks/>
        public void CommitRevisionitemAsync(string revision, RevisionItem revisionItem, string username, string password, object userState)
        {
            if ((this.CommitRevisionitemOperationCompleted == null))
            {
                this.CommitRevisionitemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitRevisionitemOperationCompleted);
            }
            this.InvokeAsync("CommitRevisionitem", new object[] {
                    revision,
                    revisionItem,
                    username,
                    password}, this.CommitRevisionitemOperationCompleted, userState);
        }

        private void OnCommitRevisionitemOperationCompleted(object arg)
        {
            if ((this.CommitRevisionitemCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitRevisionitemCompleted(this, new CommitRevisionitemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/CommitResourceitem", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CommitResourceitem(string revision, ResourceItem resourceItem, string username, string password)
        {
            object[] results = this.Invoke("CommitResourceitem", new object[] {
                    revision,
                    resourceItem,
                    username,
                    password});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCommitResourceitem(string revision, ResourceItem resourceItem, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CommitResourceitem", new object[] {
                    revision,
                    resourceItem,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCommitResourceitem(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CommitResourceitemAsync(string revision, ResourceItem resourceItem, string username, string password)
        {
            this.CommitResourceitemAsync(revision, resourceItem, username, password, null);
        }

        /// <remarks/>
        public void CommitResourceitemAsync(string revision, ResourceItem resourceItem, string username, string password, object userState)
        {
            if ((this.CommitResourceitemOperationCompleted == null))
            {
                this.CommitResourceitemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitResourceitemOperationCompleted);
            }
            this.InvokeAsync("CommitResourceitem", new object[] {
                    revision,
                    resourceItem,
                    username,
                    password}, this.CommitResourceitemOperationCompleted, userState);
        }

        private void OnCommitResourceitemOperationCompleted(object arg)
        {
            if ((this.CommitResourceitemCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitResourceitemCompleted(this, new CommitResourceitemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/CompareRevision", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CompareRevision(string directory, string username, string password)
        {
            object[] results = this.Invoke("CompareRevision", new object[] {
                    directory,
                    username,
                    password});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCompareRevision(string directory, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CompareRevision", new object[] {
                    directory,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataSet EndCompareRevision(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void CompareRevisionAsync(string directory, string username, string password)
        {
            this.CompareRevisionAsync(directory, username, password, null);
        }

        /// <remarks/>
        public void CompareRevisionAsync(string directory, string username, string password, object userState)
        {
            if ((this.CompareRevisionOperationCompleted == null))
            {
                this.CompareRevisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompareRevisionOperationCompleted);
            }
            this.InvokeAsync("CompareRevision", new object[] {
                    directory,
                    username,
                    password}, this.CompareRevisionOperationCompleted, userState);
        }

        private void OnCompareRevisionOperationCompleted(object arg)
        {
            if ((this.CompareRevisionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompareRevisionCompleted(this, new CompareRevisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/ExtractRevision", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExtractRevision(string directory, string username, string password)
        {
            this.Invoke("ExtractRevision", new object[] {
                    directory,
                    username,
                    password});
        }

        /// <remarks/>
        public System.IAsyncResult BeginExtractRevision(string directory, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ExtractRevision", new object[] {
                    directory,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public void EndExtractRevision(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ExtractRevisionAsync(string directory, string username, string password)
        {
            this.ExtractRevisionAsync(directory, username, password, null);
        }

        /// <remarks/>
        public void ExtractRevisionAsync(string directory, string username, string password, object userState)
        {
            if ((this.ExtractRevisionOperationCompleted == null))
            {
                this.ExtractRevisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtractRevisionOperationCompleted);
            }
            this.InvokeAsync("ExtractRevision", new object[] {
                    directory,
                    username,
                    password}, this.ExtractRevisionOperationCompleted, userState);
        }

        private void OnExtractRevisionOperationCompleted(object arg)
        {
            if ((this.ExtractRevisionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExtractRevisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/OpenSession", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OpenSession(string sessionKey, string username, string password)
        {
            this.Invoke("OpenSession", new object[] {
                    sessionKey,
                    username,
                    password});
        }

        /// <remarks/>
        public System.IAsyncResult BeginOpenSession(string sessionKey, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("OpenSession", new object[] {
                    sessionKey,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public void EndOpenSession(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void OpenSessionAsync(string sessionKey, string username, string password)
        {
            this.OpenSessionAsync(sessionKey, username, password, null);
        }

        /// <remarks/>
        public void OpenSessionAsync(string sessionKey, string username, string password, object userState)
        {
            if ((this.OpenSessionOperationCompleted == null))
            {
                this.OpenSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenSessionOperationCompleted);
            }
            this.InvokeAsync("OpenSession", new object[] {
                    sessionKey,
                    username,
                    password}, this.OpenSessionOperationCompleted, userState);
        }

        private void OnOpenSessionOperationCompleted(object arg)
        {
            if ((this.OpenSessionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/CloseSession", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloseSession(string sessionKey, string username, string password)
        {
            this.Invoke("CloseSession", new object[] {
                    sessionKey,
                    username,
                    password});
        }

        /// <remarks/>
        public System.IAsyncResult BeginCloseSession(string sessionKey, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CloseSession", new object[] {
                    sessionKey,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public void EndCloseSession(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CloseSessionAsync(string sessionKey, string username, string password)
        {
            this.CloseSessionAsync(sessionKey, username, password, null);
        }

        /// <remarks/>
        public void CloseSessionAsync(string sessionKey, string username, string password, object userState)
        {
            if ((this.CloseSessionOperationCompleted == null))
            {
                this.CloseSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseSessionOperationCompleted);
            }
            this.InvokeAsync("CloseSession", new object[] {
                    sessionKey,
                    username,
                    password}, this.CloseSessionOperationCompleted, userState);
        }

        private void OnCloseSessionOperationCompleted(object arg)
        {
            if ((this.CloseSessionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/Commit", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Commit(string sessionKey, string username, string password)
        {
            this.Invoke("Commit", new object[] {
                    sessionKey,
                    username,
                    password});
        }

        /// <remarks/>
        public System.IAsyncResult BeginCommit(string sessionKey, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Commit", new object[] {
                    sessionKey,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public void EndCommit(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CommitAsync(string sessionKey, string username, string password)
        {
            this.CommitAsync(sessionKey, username, password, null);
        }

        /// <remarks/>
        public void CommitAsync(string sessionKey, string username, string password, object userState)
        {
            if ((this.CommitOperationCompleted == null))
            {
                this.CommitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitOperationCompleted);
            }
            this.InvokeAsync("Commit", new object[] {
                    sessionKey,
                    username,
                    password}, this.CommitOperationCompleted, userState);
        }

        private void OnCommitOperationCompleted(object arg)
        {
            if ((this.CommitCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/Rollback", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Rollback(string sessionKey, string username, string password)
        {
            this.Invoke("Rollback", new object[] {
                    sessionKey,
                    username,
                    password});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRollback(string sessionKey, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Rollback", new object[] {
                    sessionKey,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRollback(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RollbackAsync(string sessionKey, string username, string password)
        {
            this.RollbackAsync(sessionKey, username, password, null);
        }

        /// <remarks/>
        public void RollbackAsync(string sessionKey, string username, string password, object userState)
        {
            if ((this.RollbackOperationCompleted == null))
            {
                this.RollbackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRollbackOperationCompleted);
            }
            this.InvokeAsync("Rollback", new object[] {
                    sessionKey,
                    username,
                    password}, this.RollbackOperationCompleted, userState);
        }

        private void OnRollbackOperationCompleted(object arg)
        {
            if ((this.RollbackCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RollbackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/GetAvailableRevisions", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAvailableRevisions(string username, string password)
        {
            object[] results = this.Invoke("GetAvailableRevisions", new object[] {
                    username,
                    password});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableRevisions(string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAvailableRevisions", new object[] {
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndGetAvailableRevisions(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void GetAvailableRevisionsAsync(string username, string password)
        {
            this.GetAvailableRevisionsAsync(username, password, null);
        }

        /// <remarks/>
        public void GetAvailableRevisionsAsync(string username, string password, object userState)
        {
            if ((this.GetAvailableRevisionsOperationCompleted == null))
            {
                this.GetAvailableRevisionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableRevisionsOperationCompleted);
            }
            this.InvokeAsync("GetAvailableRevisions", new object[] {
                    username,
                    password}, this.GetAvailableRevisionsOperationCompleted, userState);
        }

        private void OnGetAvailableRevisionsOperationCompleted(object arg)
        {
            if ((this.GetAvailableRevisionsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableRevisionsCompleted(this, new GetAvailableRevisionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/GetRevision", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Revision GetRevision(string name, string username, string password)
        {
            object[] results = this.Invoke("GetRevision", new object[] {
                    name,
                    username,
                    password});
            return ((Revision)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetRevision(string name, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetRevision", new object[] {
                    name,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public Revision EndGetRevision(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Revision)(results[0]));
        }

        /// <remarks/>
        public void GetRevisionAsync(string name, string username, string password)
        {
            this.GetRevisionAsync(name, username, password, null);
        }

        /// <remarks/>
        public void GetRevisionAsync(string name, string username, string password, object userState)
        {
            if ((this.GetRevisionOperationCompleted == null))
            {
                this.GetRevisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRevisionOperationCompleted);
            }
            this.InvokeAsync("GetRevision", new object[] {
                    name,
                    username,
                    password}, this.GetRevisionOperationCompleted, userState);
        }

        private void OnGetRevisionOperationCompleted(object arg)
        {
            if ((this.GetRevisionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRevisionCompleted(this, new GetRevisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/ValidateRevision", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExceptionProxy[] ValidateRevision(string directory, string username, string password)
        {
            object[] results = this.Invoke("ValidateRevision", new object[] {
                    directory,
                    username,
                    password});
            return ((ExceptionProxy[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginValidateRevision(string directory, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ValidateRevision", new object[] {
                    directory,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public ExceptionProxy[] EndValidateRevision(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExceptionProxy[])(results[0]));
        }

        /// <remarks/>
        public void ValidateRevisionAsync(string directory, string username, string password)
        {
            this.ValidateRevisionAsync(directory, username, password, null);
        }

        /// <remarks/>
        public void ValidateRevisionAsync(string directory, string username, string password, object userState)
        {
            if ((this.ValidateRevisionOperationCompleted == null))
            {
                this.ValidateRevisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateRevisionOperationCompleted);
            }
            this.InvokeAsync("ValidateRevision", new object[] {
                    directory,
                    username,
                    password}, this.ValidateRevisionOperationCompleted, userState);
        }

        private void OnValidateRevisionOperationCompleted(object arg)
        {
            if ((this.ValidateRevisionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateRevisionCompleted(this, new ValidateRevisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/Exists", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Exists(ItemIdentifier itemId, string user, string pass)
        {
            object[] results = this.Invoke("Exists", new object[] {
                    itemId,
                    user,
                    pass});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginExists(ItemIdentifier itemId, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Exists", new object[] {
                    itemId,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExists(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void ExistsAsync(ItemIdentifier itemId, string user, string pass)
        {
            this.ExistsAsync(itemId, user, pass, null);
        }

        /// <remarks/>
        public void ExistsAsync(ItemIdentifier itemId, string user, string pass, object userState)
        {
            if ((this.ExistsOperationCompleted == null))
            {
                this.ExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExistsOperationCompleted);
            }
            this.InvokeAsync("Exists", new object[] {
                    itemId,
                    user,
                    pass}, this.ExistsOperationCompleted, userState);
        }

        private void OnExistsOperationCompleted(object arg)
        {
            if ((this.ExistsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExistsCompleted(this, new ExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/Compare", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ItemConflict[] Compare([System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] item, ItemIdentifier itemId, string user, string pass)
        {
            object[] results = this.Invoke("Compare", new object[] {
                    item,
                    itemId,
                    user,
                    pass});
            return ((ItemConflict[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCompare(byte[] item, ItemIdentifier itemId, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Compare", new object[] {
                    item,
                    itemId,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public ItemConflict[] EndCompare(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ItemConflict[])(results[0]));
        }

        /// <remarks/>
        public void CompareAsync(byte[] item, ItemIdentifier itemId, string user, string pass)
        {
            this.CompareAsync(item, itemId, user, pass, null);
        }

        /// <remarks/>
        public void CompareAsync(byte[] item, ItemIdentifier itemId, string user, string pass, object userState)
        {
            if ((this.CompareOperationCompleted == null))
            {
                this.CompareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompareOperationCompleted);
            }
            this.InvokeAsync("Compare", new object[] {
                    item,
                    itemId,
                    user,
                    pass}, this.CompareOperationCompleted, userState);
        }

        private void OnCompareOperationCompleted(object arg)
        {
            if ((this.CompareCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompareCompleted(this, new CompareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/Extract", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RepositoryActionResponse Extract(string sessionKey, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] item, ItemIdentifier itemId, bool overwrite, string user, string pass)
        {
            object[] results = this.Invoke("Extract", new object[] {
                    sessionKey,
                    item,
                    itemId,
                    overwrite,
                    user,
                    pass});
            return ((RepositoryActionResponse)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginExtract(string sessionKey, byte[] item, ItemIdentifier itemId, bool overwrite, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Extract", new object[] {
                    sessionKey,
                    item,
                    itemId,
                    overwrite,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public RepositoryActionResponse EndExtract(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((RepositoryActionResponse)(results[0]));
        }

        /// <remarks/>
        public void ExtractAsync(string sessionKey, byte[] item, ItemIdentifier itemId, bool overwrite, string user, string pass)
        {
            this.ExtractAsync(sessionKey, item, itemId, overwrite, user, pass, null);
        }

        /// <remarks/>
        public void ExtractAsync(string sessionKey, byte[] item, ItemIdentifier itemId, bool overwrite, string user, string pass, object userState)
        {
            if ((this.ExtractOperationCompleted == null))
            {
                this.ExtractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtractOperationCompleted);
            }
            this.InvokeAsync("Extract", new object[] {
                    sessionKey,
                    item,
                    itemId,
                    overwrite,
                    user,
                    pass}, this.ExtractOperationCompleted, userState);
        }

        private void OnExtractOperationCompleted(object arg)
        {
            if ((this.ExtractCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExtractCompleted(this, new ExtractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/PostProcess", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RepositoryActionResponse PostProcess(string sessionKey, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] item, ItemIdentifier itemId, bool overwrite, string user, string pass)
        {
            object[] results = this.Invoke("PostProcess", new object[] {
                    sessionKey,
                    item,
                    itemId,
                    overwrite,
                    user,
                    pass});
            return ((RepositoryActionResponse)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPostProcess(string sessionKey, byte[] item, ItemIdentifier itemId, bool overwrite, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("PostProcess", new object[] {
                    sessionKey,
                    item,
                    itemId,
                    overwrite,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public RepositoryActionResponse EndPostProcess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((RepositoryActionResponse)(results[0]));
        }

        /// <remarks/>
        public void PostProcessAsync(string sessionKey, byte[] item, ItemIdentifier itemId, bool overwrite, string user, string pass)
        {
            this.PostProcessAsync(sessionKey, item, itemId, overwrite, user, pass, null);
        }

        /// <remarks/>
        public void PostProcessAsync(string sessionKey, byte[] item, ItemIdentifier itemId, bool overwrite, string user, string pass, object userState)
        {
            if ((this.PostProcessOperationCompleted == null))
            {
                this.PostProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostProcessOperationCompleted);
            }
            this.InvokeAsync("PostProcess", new object[] {
                    sessionKey,
                    item,
                    itemId,
                    overwrite,
                    user,
                    pass}, this.PostProcessOperationCompleted, userState);
        }

        private void OnPostProcessOperationCompleted(object arg)
        {
            if ((this.PostProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostProcessCompleted(this, new PostProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/TransferResource", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TransferResource(string sessionKey, ItemIdentifier itemId, string type, Resource resource, bool overwrite, string user, string pass)
        {
            object[] results = this.Invoke("TransferResource", new object[] {
                    sessionKey,
                    itemId,
                    type,
                    resource,
                    overwrite,
                    user,
                    pass});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferResource(string sessionKey, ItemIdentifier itemId, string type, Resource resource, bool overwrite, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferResource", new object[] {
                    sessionKey,
                    itemId,
                    type,
                    resource,
                    overwrite,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndTransferResource(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void TransferResourceAsync(string sessionKey, ItemIdentifier itemId, string type, Resource resource, bool overwrite, string user, string pass)
        {
            this.TransferResourceAsync(sessionKey, itemId, type, resource, overwrite, user, pass, null);
        }

        /// <remarks/>
        public void TransferResourceAsync(string sessionKey, ItemIdentifier itemId, string type, Resource resource, bool overwrite, string user, string pass, object userState)
        {
            if ((this.TransferResourceOperationCompleted == null))
            {
                this.TransferResourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferResourceOperationCompleted);
            }
            this.InvokeAsync("TransferResource", new object[] {
                    sessionKey,
                    itemId,
                    type,
                    resource,
                    overwrite,
                    user,
                    pass}, this.TransferResourceOperationCompleted, userState);
        }

        private void OnTransferResourceOperationCompleted(object arg)
        {
            if ((this.TransferResourceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferResourceCompleted(this, new TransferResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/TransferResources", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TransferResources(string sessionKey, ResourceTransfer[] resources, string user, string pass)
        {
            object[] results = this.Invoke("TransferResources", new object[] {
                    sessionKey,
                    resources,
                    user,
                    pass});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferResources(string sessionKey, ResourceTransfer[] resources, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferResources", new object[] {
                    sessionKey,
                    resources,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndTransferResources(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void TransferResourcesAsync(string sessionKey, ResourceTransfer[] resources, string user, string pass)
        {
            this.TransferResourcesAsync(sessionKey, resources, user, pass, null);
        }

        /// <remarks/>
        public void TransferResourcesAsync(string sessionKey, ResourceTransfer[] resources, string user, string pass, object userState)
        {
            if ((this.TransferResourcesOperationCompleted == null))
            {
                this.TransferResourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferResourcesOperationCompleted);
            }
            this.InvokeAsync("TransferResources", new object[] {
                    sessionKey,
                    resources,
                    user,
                    pass}, this.TransferResourcesOperationCompleted, userState);
        }

        private void OnTransferResourcesOperationCompleted(object arg)
        {
            if ((this.TransferResourcesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferResourcesCompleted(this, new TransferResourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/Execute", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Execute(string sessionKey, string EventAlias, ItemIdentifier itemId, System.Data.DataSet parameters, string user, string pass)
        {
            this.Invoke("Execute", new object[] {
                    sessionKey,
                    EventAlias,
                    itemId,
                    parameters,
                    user,
                    pass});
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecute(string sessionKey, string EventAlias, ItemIdentifier itemId, System.Data.DataSet parameters, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Execute", new object[] {
                    sessionKey,
                    EventAlias,
                    itemId,
                    parameters,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public void EndExecute(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ExecuteAsync(string sessionKey, string EventAlias, ItemIdentifier itemId, System.Data.DataSet parameters, string user, string pass)
        {
            this.ExecuteAsync(sessionKey, EventAlias, itemId, parameters, user, pass, null);
        }

        /// <remarks/>
        public void ExecuteAsync(string sessionKey, string EventAlias, ItemIdentifier itemId, System.Data.DataSet parameters, string user, string pass, object userState)
        {
            if ((this.ExecuteOperationCompleted == null))
            {
                this.ExecuteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteOperationCompleted);
            }
            this.InvokeAsync("Execute", new object[] {
                    sessionKey,
                    EventAlias,
                    itemId,
                    parameters,
                    user,
                    pass}, this.ExecuteOperationCompleted, userState);
        }

        private void OnExecuteOperationCompleted(object arg)
        {
            if ((this.ExecuteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/ExecuteQueue", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteQueue(string sessionKey, string queueAlias, string user, string pass)
        {
            this.Invoke("ExecuteQueue", new object[] {
                    sessionKey,
                    queueAlias,
                    user,
                    pass});
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteQueue(string sessionKey, string queueAlias, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ExecuteQueue", new object[] {
                    sessionKey,
                    queueAlias,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public void EndExecuteQueue(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ExecuteQueueAsync(string sessionKey, string queueAlias, string user, string pass)
        {
            this.ExecuteQueueAsync(sessionKey, queueAlias, user, pass, null);
        }

        /// <remarks/>
        public void ExecuteQueueAsync(string sessionKey, string queueAlias, string user, string pass, object userState)
        {
            if ((this.ExecuteQueueOperationCompleted == null))
            {
                this.ExecuteQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteQueueOperationCompleted);
            }
            this.InvokeAsync("ExecuteQueue", new object[] {
                    sessionKey,
                    queueAlias,
                    user,
                    pass}, this.ExecuteQueueOperationCompleted, userState);
        }

        private void OnExecuteQueueOperationCompleted(object arg)
        {
            if ((this.ExecuteQueueCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/Package", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Package(string sessionKey, ItemIdentifier itemId, string user, string pass)
        {
            object[] results = this.Invoke("Package", new object[] {
                    sessionKey,
                    itemId,
                    user,
                    pass});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPackage(string sessionKey, ItemIdentifier itemId, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Package", new object[] {
                    sessionKey,
                    itemId,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public string EndPackage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void PackageAsync(string sessionKey, ItemIdentifier itemId, string user, string pass)
        {
            this.PackageAsync(sessionKey, itemId, user, pass, null);
        }

        /// <remarks/>
        public void PackageAsync(string sessionKey, ItemIdentifier itemId, string user, string pass, object userState)
        {
            if ((this.PackageOperationCompleted == null))
            {
                this.PackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPackageOperationCompleted);
            }
            this.InvokeAsync("Package", new object[] {
                    sessionKey,
                    itemId,
                    user,
                    pass}, this.PackageOperationCompleted, userState);
        }

        private void OnPackageOperationCompleted(object arg)
        {
            if ((this.PackageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PackageCompleted(this, new PackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/GetChildren", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemItem[] GetChildren(ItemIdentifier itemId, string user, string pass)
        {
            object[] results = this.Invoke("GetChildren", new object[] {
                    itemId,
                    user,
                    pass});
            return ((SystemItem[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetChildren(ItemIdentifier itemId, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetChildren", new object[] {
                    itemId,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public SystemItem[] EndGetChildren(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemItem[])(results[0]));
        }

        /// <remarks/>
        public void GetChildrenAsync(ItemIdentifier itemId, string user, string pass)
        {
            this.GetChildrenAsync(itemId, user, pass, null);
        }

        /// <remarks/>
        public void GetChildrenAsync(ItemIdentifier itemId, string user, string pass, object userState)
        {
            if ((this.GetChildrenOperationCompleted == null))
            {
                this.GetChildrenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildrenOperationCompleted);
            }
            this.InvokeAsync("GetChildren", new object[] {
                    itemId,
                    user,
                    pass}, this.GetChildrenOperationCompleted, userState);
        }

        private void OnGetChildrenOperationCompleted(object arg)
        {
            if ((this.GetChildrenCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildrenCompleted(this, new GetChildrenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/GetResourceContents", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetResourceContents(string sessionKey, ItemIdentifier itemId, string itemTypeName, Resource resource, string user, string pass)
        {
            object[] results = this.Invoke("GetResourceContents", new object[] {
                    sessionKey,
                    itemId,
                    itemTypeName,
                    resource,
                    user,
                    pass});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetResourceContents(string sessionKey, ItemIdentifier itemId, string itemTypeName, Resource resource, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetResourceContents", new object[] {
                    sessionKey,
                    itemId,
                    itemTypeName,
                    resource,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetResourceContents(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetResourceContentsAsync(string sessionKey, ItemIdentifier itemId, string itemTypeName, Resource resource, string user, string pass)
        {
            this.GetResourceContentsAsync(sessionKey, itemId, itemTypeName, resource, user, pass, null);
        }

        /// <remarks/>
        public void GetResourceContentsAsync(string sessionKey, ItemIdentifier itemId, string itemTypeName, Resource resource, string user, string pass, object userState)
        {
            if ((this.GetResourceContentsOperationCompleted == null))
            {
                this.GetResourceContentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResourceContentsOperationCompleted);
            }
            this.InvokeAsync("GetResourceContents", new object[] {
                    sessionKey,
                    itemId,
                    itemTypeName,
                    resource,
                    user,
                    pass}, this.GetResourceContentsOperationCompleted, userState);
        }

        private void OnGetResourceContentsOperationCompleted(object arg)
        {
            if ((this.GetResourceContentsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResourceContentsCompleted(this, new GetResourceContentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/GetResourceHash", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetResourceHash(string sessionKey, Resource resource, string user, string pass)
        {
            object[] results = this.Invoke("GetResourceHash", new object[] {
                    sessionKey,
                    resource,
                    user,
                    pass});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetResourceHash(string sessionKey, Resource resource, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetResourceHash", new object[] {
                    sessionKey,
                    resource,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetResourceHash(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetResourceHashAsync(string sessionKey, Resource resource, string user, string pass)
        {
            this.GetResourceHashAsync(sessionKey, resource, user, pass, null);
        }

        /// <remarks/>
        public void GetResourceHashAsync(string sessionKey, Resource resource, string user, string pass, object userState)
        {
            if ((this.GetResourceHashOperationCompleted == null))
            {
                this.GetResourceHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResourceHashOperationCompleted);
            }
            this.InvokeAsync("GetResourceHash", new object[] {
                    sessionKey,
                    resource,
                    user,
                    pass}, this.GetResourceHashOperationCompleted, userState);
        }

        private void OnGetResourceHashOperationCompleted(object arg)
        {
            if ((this.GetResourceHashCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResourceHashCompleted(this, new GetResourceHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/GetItemHash", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetItemHash(string sessionKey, ItemIdentifier itemId, string user, string pass)
        {
            object[] results = this.Invoke("GetItemHash", new object[] {
                    sessionKey,
                    itemId,
                    user,
                    pass});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetItemHash(string sessionKey, ItemIdentifier itemId, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetItemHash", new object[] {
                    sessionKey,
                    itemId,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetItemHash(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetItemHashAsync(string sessionKey, ItemIdentifier itemId, string user, string pass)
        {
            this.GetItemHashAsync(sessionKey, itemId, user, pass, null);
        }

        /// <remarks/>
        public void GetItemHashAsync(string sessionKey, ItemIdentifier itemId, string user, string pass, object userState)
        {
            if ((this.GetItemHashOperationCompleted == null))
            {
                this.GetItemHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemHashOperationCompleted);
            }
            this.InvokeAsync("GetItemHash", new object[] {
                    sessionKey,
                    itemId,
                    user,
                    pass}, this.GetItemHashOperationCompleted, userState);
        }

        private void OnGetItemHashOperationCompleted(object arg)
        {
            if ((this.GetItemHashCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemHashCompleted(this, new GetItemHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/SaveItem", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveItem(ItemIdentifier itemId, string itemAsBase64, string providerDirectory, string revisionAlias, string user, string pass)
        {
            object[] results = this.Invoke("SaveItem", new object[] {
                    itemId,
                    itemAsBase64,
                    providerDirectory,
                    revisionAlias,
                    user,
                    pass});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSaveItem(ItemIdentifier itemId, string itemAsBase64, string providerDirectory, string revisionAlias, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SaveItem", new object[] {
                    itemId,
                    itemAsBase64,
                    providerDirectory,
                    revisionAlias,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSaveItem(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SaveItemAsync(ItemIdentifier itemId, string itemAsBase64, string providerDirectory, string revisionAlias, string user, string pass)
        {
            this.SaveItemAsync(itemId, itemAsBase64, providerDirectory, revisionAlias, user, pass, null);
        }

        /// <remarks/>
        public void SaveItemAsync(ItemIdentifier itemId, string itemAsBase64, string providerDirectory, string revisionAlias, string user, string pass, object userState)
        {
            if ((this.SaveItemOperationCompleted == null))
            {
                this.SaveItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveItemOperationCompleted);
            }
            this.InvokeAsync("SaveItem", new object[] {
                    itemId,
                    itemAsBase64,
                    providerDirectory,
                    revisionAlias,
                    user,
                    pass}, this.SaveItemOperationCompleted, userState);
        }

        private void OnSaveItemOperationCompleted(object arg)
        {
            if ((this.SaveItemCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveItemCompleted(this, new SaveItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/Clear", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Clear(string revisionAlias, string user, string pass)
        {
            object[] results = this.Invoke("Clear", new object[] {
                    revisionAlias,
                    user,
                    pass});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginClear(string revisionAlias, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Clear", new object[] {
                    revisionAlias,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public string EndClear(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ClearAsync(string revisionAlias, string user, string pass)
        {
            this.ClearAsync(revisionAlias, user, pass, null);
        }

        /// <remarks/>
        public void ClearAsync(string revisionAlias, string user, string pass, object userState)
        {
            if ((this.ClearOperationCompleted == null))
            {
                this.ClearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearOperationCompleted);
            }
            this.InvokeAsync("Clear", new object[] {
                    revisionAlias,
                    user,
                    pass}, this.ClearOperationCompleted, userState);
        }

        private void OnClearOperationCompleted(object arg)
        {
            if ((this.ClearCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearCompleted(this, new ClearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://courier.umbraco.org/SaveResourceContents", RequestNamespace = "http://courier.umbraco.org/", ResponseNamespace = "http://courier.umbraco.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveResourceContents(ItemIdentifier itemId, string itemTypeName, Resource resource, string revisionAlias, string user, string pass)
        {
            object[] results = this.Invoke("SaveResourceContents", new object[] {
                    itemId,
                    itemTypeName,
                    resource,
                    revisionAlias,
                    user,
                    pass});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSaveResourceContents(ItemIdentifier itemId, string itemTypeName, Resource resource, string revisionAlias, string user, string pass, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SaveResourceContents", new object[] {
                    itemId,
                    itemTypeName,
                    resource,
                    revisionAlias,
                    user,
                    pass}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSaveResourceContents(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SaveResourceContentsAsync(ItemIdentifier itemId, string itemTypeName, Resource resource, string revisionAlias, string user, string pass)
        {
            this.SaveResourceContentsAsync(itemId, itemTypeName, resource, revisionAlias, user, pass, null);
        }

        /// <remarks/>
        public void SaveResourceContentsAsync(ItemIdentifier itemId, string itemTypeName, Resource resource, string revisionAlias, string user, string pass, object userState)
        {
            if ((this.SaveResourceContentsOperationCompleted == null))
            {
                this.SaveResourceContentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveResourceContentsOperationCompleted);
            }
            this.InvokeAsync("SaveResourceContents", new object[] {
                    itemId,
                    itemTypeName,
                    resource,
                    revisionAlias,
                    user,
                    pass}, this.SaveResourceContentsOperationCompleted, userState);
        }

        private void OnSaveResourceContentsOperationCompleted(object arg)
        {
            if ((this.SaveResourceContentsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveResourceContentsCompleted(this, new SaveResourceContentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }



    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CommitRevisionCompletedEventHandler(object sender, CommitRevisionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitRevisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CommitRevisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CommitRevisionitemCompletedEventHandler(object sender, CommitRevisionitemCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitRevisionitemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CommitRevisionitemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CommitResourceitemCompletedEventHandler(object sender, CommitResourceitemCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitResourceitemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CommitResourceitemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CompareRevisionCompletedEventHandler(object sender, CompareRevisionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompareRevisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CompareRevisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ExtractRevisionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void OpenSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CloseSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CommitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void RollbackCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetAvailableRevisionsCompletedEventHandler(object sender, GetAvailableRevisionsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableRevisionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAvailableRevisionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetRevisionCompletedEventHandler(object sender, GetRevisionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRevisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRevisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Revision Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Revision)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ValidateRevisionCompletedEventHandler(object sender, ValidateRevisionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateRevisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateRevisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ExceptionProxy[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ExceptionProxy[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ExistsCompletedEventHandler(object sender, ExistsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CompareCompletedEventHandler(object sender, CompareCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CompareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ItemConflict[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ItemConflict[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ExtractCompletedEventHandler(object sender, ExtractCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExtractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ExtractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public RepositoryActionResponse Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((RepositoryActionResponse)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void PostProcessCompletedEventHandler(object sender, PostProcessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PostProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public RepositoryActionResponse Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((RepositoryActionResponse)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void TransferResourceCompletedEventHandler(object sender, TransferResourceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferResourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferResourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void TransferResourcesCompletedEventHandler(object sender, TransferResourcesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferResourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferResourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ExecuteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ExecuteQueueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void PackageCompletedEventHandler(object sender, PackageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetChildrenCompletedEventHandler(object sender, GetChildrenCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildrenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetChildrenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SystemItem[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SystemItem[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetResourceContentsCompletedEventHandler(object sender, GetResourceContentsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResourceContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetResourceContentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetResourceHashCompletedEventHandler(object sender, GetResourceHashCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResourceHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetResourceHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetItemHashCompletedEventHandler(object sender, GetItemHashCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetItemHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SaveItemCompletedEventHandler(object sender, SaveItemCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SaveItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ClearCompletedEventHandler(object sender, ClearCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ClearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SaveResourceContentsCompletedEventHandler(object sender, SaveResourceContentsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveResourceContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SaveResourceContentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }


}